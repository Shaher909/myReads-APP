{"ast":null,"code":"var _jsxFileName = \"/Users/shaherjamaleddin/Documents/Repos/myReads/nd0191-c1-myreads/starter/src/components/SearchBooks.js\",\n    _s = $RefreshSig$();\n\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport Book from \"./Book\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBooks = ({\n  books,\n  shelves,\n  updateBooks\n}) => {\n  _s();\n\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState(\"\");\n\n  const updateQuery = query => {\n    setQuery(query);\n  };\n\n  useEffect(() => {\n    if (query !== \"\") {\n      const searchBooks = async () => {\n        console.log(query);\n        const res = await BooksAPI.search(query, 20);\n\n        if (Array.isArray(res)) {\n          setResults(res);\n        } else {\n          setResults([]);\n        }\n\n        console.log(res);\n      };\n\n      searchBooks();\n    }\n  }, [query]);\n  const showingResults = query === \"\" ? [] : results.filter(b => b.title.toLowerCase().includes(query.toLowerCase()) || b.authors && b.authors.some(author => author.toLowerCase().includes(query.toLowerCase())) || b.industryIdentifiers && b.industryIdentifiers.some(industryIdentifier => industryIdentifier.identifier.toLowerCase().includes(query.toLowerCase()))); // Find the matching book in the books array and update its shelf property\n\n  let foundBooks = showingResults.map(book => {\n    let foundBook = books.find(b => b.id === book.id);\n\n    if (foundBook) {\n      book.shelf = foundBook.shelf;\n    } else {\n      book.shelf = \"none\";\n    }\n\n    return book;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: query,\n          onChange: event => updateQuery(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\",\n        children: foundBooks.map(found_book =>\n        /*#__PURE__*/\n        // Render the book component with the shelf value}\n        _jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Book, {\n            book: found_book,\n            shelves: shelves,\n            updateBooks: updateBooks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 43\n          }, this)\n        }, found_book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBooks, \"Ke6tpuAvKY3w5wJbcUctKuyMFNI=\");\n\n_c = SearchBooks;\nexport default SearchBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"sources":["/Users/shaherjamaleddin/Documents/Repos/myReads/nd0191-c1-myreads/starter/src/components/SearchBooks.js"],"names":["Link","useState","useEffect","Book","BooksAPI","SearchBooks","books","shelves","updateBooks","results","setResults","query","setQuery","updateQuery","searchBooks","console","log","res","search","Array","isArray","showingResults","filter","b","title","toLowerCase","includes","authors","some","author","industryIdentifiers","industryIdentifier","identifier","foundBooks","map","book","foundBook","find","id","shelf","event","target","value","found_book"],"mappings":"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","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport Book from \"./Book\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nconst SearchBooks = ( {books, shelves, updateBooks} ) => {\n\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState(\"\");\n\n    const updateQuery = (query) =>{\n        setQuery(query);\n    }\n\n    useEffect(() => {\n      if (query !== \"\") {\n      const searchBooks = async() => {\n        console.log(query);\n        const res = await BooksAPI.search(query, 20);\n        if(Array.isArray(res)) {\n          setResults(res);\n        } else {\n          setResults([]);\n        }\n        console.log(res);\n      }\n      searchBooks();\n    }\n    }, [query])\n\n    const showingResults = \n        query === \"\" \n            ? []\n            : results.filter((b) => b.title.toLowerCase().includes(query.toLowerCase()) \n            || (b.authors && b.authors.some(author => author.toLowerCase().includes(query.toLowerCase())))\n            || (b.industryIdentifiers && b.industryIdentifiers.some(industryIdentifier => industryIdentifier.identifier.toLowerCase().includes(query.toLowerCase())))\n            );\n\n\n        // Find the matching book in the books array and update its shelf property\n        let foundBooks = showingResults.map((book) => {\n          let foundBook = books.find((b) => b.id === book.id);\n          if (foundBook) {\n            book.shelf = foundBook.shelf;\n          } else {\n            book.shelf = \"none\";\n          }\n          return book;\n        });\n\n\n    return (\n        <div className=\"search-books\">\n          <div className=\"search-books-bar\">\n            <Link className=\"close-search\" to=\"/\">Close</Link>\n            <div className=\"search-books-input-wrapper\">\n              <input\n                type=\"text\"\n                placeholder=\"Search by title, author, or ISBN\"\n                value={query} \n                onChange={(event)=> updateQuery(event.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"search-books-results\">\n            <ol className=\"books-grid\">\n              {\n                foundBooks.map((found_book) => (\n                    // Render the book component with the shelf value}\n                  <li key={found_book.id}><Book book={found_book} shelves={shelves} updateBooks={updateBooks}></Book></li>\n                ))\n              }\n            </ol>\n          </div>\n        </div>\n    );\n}\n\nexport default SearchBooks;\n\n\n"]},"metadata":{},"sourceType":"module"}